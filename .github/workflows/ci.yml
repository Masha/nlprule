name: CI

on:
  release:
    types: [published]
  push:
  pull_request:

jobs:
  rust:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --all-features --release -p nlprule
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
      - run: |
          mkdir data
          mkdir storage

          cd data
          wget https://f000.backblazeb2.com/file/nlprule/en.zip
          unzip en.zip
          wget https://f000.backblazeb2.com/file/nlprule/de.zip
          unzip de.zip
          wget https://f000.backblazeb2.com/file/nlprule/es.zip
          unzip es.zip
      - uses: actions-rs/cargo@v1
        with:
          command: run
          # build english, see BUILD.md
          args: --all-features --release --bin compile -- --tag-paths data/en/tags/output.dump data/en/tags/added.txt --tag-remove-paths data/en/tags/removed.txt --disambiguation-path data/en/disambiguation.canonic.xml --tokenizer-config-path configs/en/tokenizer.json --grammar-path data/en/grammar.canonic.xml --rules-config-path configs/en/rules.json --common-words-path data/en/common.txt --chunker-path data/en/chunker.json --out-tokenizer-path storage/en_tokenizer.bin --out-rules-path storage/en_rules.bin --regex-cache-path data/en/regex_cache.bin
      - uses: actions-rs/cargo@v1
        with:
          command: run
          # build german, see BUILD.md
          args: --all-features --release --bin compile -- --tag-paths data/de/tags/output.dump data/de/tags/added.txt --tag-remove-paths data/de/tags/removed.txt --disambiguation-path data/de/disambiguation.canonic.xml --tokenizer-config-path configs/de/tokenizer.json --grammar-path data/de/grammar.canonic.xml --rules-config-path configs/de/rules.json --common-words-path data/de/common.txt --out-tokenizer-path storage/de_tokenizer.bin --out-rules-path storage/de_rules.bin --regex-cache-path data/de/regex_cache.bin --multiword-tag-path data/en/tags/multiwords.txt
      - uses: actions-rs/cargo@v1
        with:
          command: run
          # build spanish, see BUILD.md
          args: --all-features --release --bin compile -- --tag-paths data/es/tags/output.dump data/es/tags/added.txt --tag-remove-paths data/es/tags/removed.txt --disambiguation-path data/es/disambiguation.canonic.xml --tokenizer-config-path configs/es/tokenizer.json --grammar-path data/es/grammar.canonic.xml --rules-config-path configs/es/rules.json --common-words-path data/es/common.txt --out-tokenizer-path storage/es_tokenizer.bin --out-rules-path storage/es_rules.bin --regex-cache-path data/es/regex_cache.bin --multiword-tag-path data/es/tags/multiwords.txt
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --all-features --release -p nlprule
      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --all-features --release --bin test_disambiguation -- --tokenizer storage/en_tokenizer.bin
      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --all-features --release --bin test -- --tokenizer storage/en_tokenizer.bin --rules storage/en_rules.bin
      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --all-features --release --bin test_disambiguation -- --tokenizer storage/de_tokenizer.bin
      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --all-features --release --bin test -- --tokenizer storage/de_tokenizer.bin --rules storage/de_rules.bin
      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --all-features --release --bin test_disambiguation -- --tokenizer storage/es_tokenizer.bin
      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --all-features --release --bin test -- --tokenizer storage/es_tokenizer.bin --rules storage/es_rules.bin
      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: storage/*

  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Required as the JSON input file needs to be read
      - uses: actions/checkout@v2      
      - id: set-matrix
        uses: JoshuaTheMiller/conditional-build-matrix@0.0.1
        with:
          # inputFile: '.github/workflows/matrix_includes.json' # Default input file path
          filter: '[?runOnEvent==`${{ github.event_name }}` || runOnEvent==`always`]'

  python:
    needs: [matrix_prep, rust]
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.os }}
    env:
      working-directory: bindings/python
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v2
        with:
          name: binaries
          path: storage
      - name: Install GSED (if needed) # needed by set_version.sh and maturin.sh
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-sed
      - name: Update version (if release)
        if: github.event_name == 'release'
        run: |
          bash scripts/set_version.sh ${{ github.event.release.tag_name }}
      - name: Build
        run: |
          python -m pip install --upgrade pip
          pip install maturin==0.8.3 pytest==6.1.2
         
          bash scripts/maturin.sh build --interpreter python --release --manylinux 1
          wheel=
          pip install $(ls target/wheels/* | head -n1)

          pytest bindings/python/test.py -s
        shell: bash
      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v2
        with:
          name: python-wheel
          path: target/wheels/*

  publish:
    runs-on: ubuntu-latest
    needs: [rust, python]
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - uses: actions/download-artifact@v2
        with:
          name: python-wheel
          path: python-wheel
      - uses: actions/download-artifact@v2
        with:
          name: binaries
          path: storage
      - run: |
          gzip storage/en_tokenizer.bin
          gzip storage/en_rules.bin
          gzip storage/de_tokenizer.bin
          gzip storage/de_rules.bin
      - name: Update version
        run: |
          bash scripts/set_version.sh ${{ github.event.release.tag_name }}
      - name: Publish on crates.io
        run: | # --allow-dirty is only needed b/c of the README.md, we can be sure it is clean otherwise anyway because it is freshly checked out
          cargo login $CARGO_KEY

          cp README.md nlprule/README.md

          cd nlprule
          cargo publish --allow-dirty
          rm README.md
        env:
          CARGO_KEY: ${{ secrets.CARGO_KEY }}
      - name: Publish on PyPI
        run: |
          pip install twine==3.3
          twine upload python-wheel/*
        env:
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
      - name: Upload release binaries
        uses: alexellis/upload-assets@0.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["./storage/*"]'
      - run: |
          rm -r python-wheel
          rm -r storage
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: v${{ github.event.release.tag_name }}
          branch: master